[{"C:\\React\\todolist-13-16\\todolist_16\\src\\index.tsx":"1","C:\\React\\todolist-13-16\\todolist_16\\src\\reportWebVitals.ts":"2","C:\\React\\todolist-13-16\\todolist_16\\src\\app\\store.ts":"3","C:\\React\\todolist-13-16\\todolist_16\\src\\app\\App.tsx":"4","C:\\React\\todolist-13-16\\todolist_16\\src\\app\\app-reducer.ts":"5","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\tasks-reducer.ts":"6","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\todolists-reducer.ts":"7","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\Login\\authReducer.tsx":"8","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\TodolistsList.tsx":"9","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\Login\\Login.tsx":"10","C:\\React\\todolist-13-16\\todolist_16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"11","C:\\React\\todolist-13-16\\todolist_16\\src\\api\\todolists-api.ts":"12","C:\\React\\todolist-13-16\\todolist_16\\src\\utils\\error-utils.ts":"13","C:\\React\\todolist-13-16\\todolist_16\\src\\components\\AddItemForm\\AddItemForm.tsx":"14","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"15","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"16","C:\\React\\todolist-13-16\\todolist_16\\src\\components\\EditableSpan\\EditableSpan.tsx":"17"},{"size":758,"mtime":1619105383115,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607869388000,"results":"20","hashOfConfig":"19"},{"size":1452,"mtime":1619869485096,"results":"21","hashOfConfig":"19"},{"size":2789,"mtime":1619121225800,"results":"22","hashOfConfig":"19"},{"size":2590,"mtime":1619874315991,"results":"23","hashOfConfig":"19"},{"size":7560,"mtime":1619880434699,"results":"24","hashOfConfig":"19"},{"size":6609,"mtime":1619877309260,"results":"25","hashOfConfig":"19"},{"size":3030,"mtime":1619873588523,"results":"26","hashOfConfig":"19"},{"size":4036,"mtime":1619877071180,"results":"27","hashOfConfig":"19"},{"size":4207,"mtime":1619121229611,"results":"28","hashOfConfig":"19"},{"size":1101,"mtime":1619873686653,"results":"29","hashOfConfig":"19"},{"size":3104,"mtime":1619121230008,"results":"30","hashOfConfig":"19"},{"size":867,"mtime":1619874253934,"results":"31","hashOfConfig":"19"},{"size":1595,"mtime":1596715562000,"results":"32","hashOfConfig":"19"},{"size":4193,"mtime":1596715250000,"results":"33","hashOfConfig":"19"},{"size":1773,"mtime":1596295538000,"results":"34","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"15z9wy7",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React\\todolist-13-16\\todolist_16\\src\\index.tsx",["78"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\React\\todolist-13-16\\todolist_16\\src\\reportWebVitals.ts",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\app\\store.ts",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\app\\App.tsx",["79","80"],"import React, {useEffect} from \"react\"\r\nimport \"./App.css\"\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\"\r\nimport {Menu, Router} from \"@material-ui/icons\"\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\"\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"./store\"\r\nimport {RequestStatusType} from \"./app-reducer\"\r\nimport {Redirect, Route, Switch} from \"react-router-dom\"\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC());\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color={\"inherit\"} onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                {/*switch останавливается при первом совпадении url*/}\r\n                <Switch>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} render={() => <Login/>}/>\r\n                    <Route path={\"/404\"} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    {/*должна быть внизу (*), любой url*/}\r\n                    <Redirect from={\"*\"} to={\"/404\"}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\app\\app-reducer.ts",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\todolists-reducer.ts",["81"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case 'REMOVE-TODOLIST':\r\n//             return state.filter(tl => tl.id != action.id)\r\n//         case 'ADD-TODOLIST':\r\n//             return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n//\r\n//         case 'CHANGE-TODOLIST-TITLE':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         case 'CHANGE-TODOLIST-FILTER':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n//         case 'SET-TODOLISTS':\r\n//             return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n//Redux Toolkit\r\nexport const slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state.splice(index, 1)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\n//Redux Toolkit\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions;\r\n\r\n\r\n// actions\r\n// export const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n// export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n// export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n//     type: 'CHANGE-TODOLIST-TITLE',\r\n//     id,\r\n//     title\r\n// } as const)\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n//     type: 'CHANGE-TODOLIST-FILTER',\r\n//     id,\r\n//     filter\r\n// } as const)\r\n// export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n//     type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\n// export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\n// type ActionsType =\r\n//     | RemoveTodolistActionType\r\n//     | AddTodolistActionType\r\n//     | ReturnType<typeof changeTodolistTitleAC>\r\n//     | ReturnType<typeof changeTodolistFilterAC>\r\n//     | SetTodolistsActionType\r\n//     | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType>\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\Login\\authReducer.tsx",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\TodolistsList.tsx",["82","83","84","85","86","87","88","89"],"import React, {useCallback, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\"\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\"\r\nimport {TaskStatuses} from \"../../api/todolists-api\"\r\nimport {Grid, Paper} from \"@material-ui/core\"\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\"\r\nimport {Todolist} from \"./Todolist/Todolist\"\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\Login\\Login.tsx",["90","91"],"import React from \"react\"\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from \"@material-ui/core\"\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Short password\"\r\n            } else if (!values.password) {\r\n                errors.password = \"Required\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={\"https://social-network.samuraijs.com/\"}\r\n                               target={\"_blank\"}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                            onBlur={formik.handleBlur}\r\n                            // name=\"email\"\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                            onBlur={formik.handleBlur}\r\n                            // name=\"password\"\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.password}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={\"Remember me\"}\r\n                            control={<Checkbox\r\n                                name=\"rememberMe\"\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\api\\todolists-api.ts",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\utils\\error-utils.ts",[],"C:\\React\\todolist-13-16\\todolist_16\\src\\components\\AddItemForm\\AddItemForm.tsx",["92","93","94"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["95","96","97","98","99","100"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["101","102","103"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\React\\todolist-13-16\\todolist_16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"104","severity":1,"message":"105","line":8,"column":9,"nodeType":"106","messageId":"107","endLine":8,"endColumn":22},{"ruleId":"104","severity":1,"message":"108","line":13,"column":15,"nodeType":"106","messageId":"107","endLine":13,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":35,"column":8,"nodeType":"111","endLine":35,"endColumn":10,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"113","line":152,"column":6,"nodeType":"106","messageId":"107","endLine":152,"endColumn":19},{"ruleId":"109","severity":1,"message":"114","line":37,"column":8,"nodeType":"111","endLine":37,"endColumn":10,"suggestions":"115"},{"ruleId":"109","severity":1,"message":"116","line":42,"column":8,"nodeType":"111","endLine":42,"endColumn":10,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"116","line":47,"column":8,"nodeType":"111","endLine":47,"endColumn":10,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"116","line":52,"column":8,"nodeType":"111","endLine":52,"endColumn":10,"suggestions":"119"},{"ruleId":"109","severity":1,"message":"116","line":57,"column":8,"nodeType":"111","endLine":57,"endColumn":10,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"116","line":62,"column":8,"nodeType":"111","endLine":62,"endColumn":10,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"116","line":67,"column":8,"nodeType":"111","endLine":67,"endColumn":10,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"116","line":72,"column":8,"nodeType":"111","endLine":72,"endColumn":10,"suggestions":"123"},{"ruleId":"104","severity":1,"message":"124","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":24},{"ruleId":"125","severity":1,"message":"126","line":58,"column":29,"nodeType":"127","messageId":"128","endLine":59,"endColumn":50,"fix":"129"},{"ruleId":"104","severity":1,"message":"130","line":2,"column":9,"nodeType":"106","messageId":"107","endLine":2,"endColumn":12},{"ruleId":"104","severity":1,"message":"131","line":2,"column":14,"nodeType":"106","messageId":"107","endLine":2,"endColumn":20},{"ruleId":"104","severity":1,"message":"132","line":2,"column":22,"nodeType":"106","messageId":"107","endLine":2,"endColumn":33},{"ruleId":"109","severity":1,"message":"133","line":35,"column":8,"nodeType":"111","endLine":35,"endColumn":10,"suggestions":"134"},{"ruleId":"109","severity":1,"message":"135","line":39,"column":8,"nodeType":"111","endLine":39,"endColumn":42,"suggestions":"136"},{"ruleId":"109","severity":1,"message":"135","line":46,"column":8,"nodeType":"111","endLine":46,"endColumn":54,"suggestions":"137"},{"ruleId":"109","severity":1,"message":"135","line":48,"column":95,"nodeType":"111","endLine":48,"endColumn":134,"suggestions":"138"},{"ruleId":"109","severity":1,"message":"135","line":49,"column":101,"nodeType":"111","endLine":49,"endColumn":140,"suggestions":"139"},{"ruleId":"109","severity":1,"message":"135","line":50,"column":107,"nodeType":"111","endLine":50,"endColumn":146,"suggestions":"140"},{"ruleId":"109","severity":1,"message":"135","line":15,"column":97,"nodeType":"111","endLine":15,"endColumn":130,"suggestions":"141"},{"ruleId":"109","severity":1,"message":"135","line":20,"column":8,"nodeType":"111","endLine":20,"endColumn":41,"suggestions":"142"},{"ruleId":"109","severity":1,"message":"135","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":41,"suggestions":"143"},"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["144"],"'ThunkDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["145"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["146"],["147"],["148"],["149"],["150"],["151"],["152"],"'LoginParamsType' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"153","text":"154"},"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["155"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["156"],["157"],["158"],["159"],["160"],["161"],["162"],["163"],{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"164","fix":"168"},{"desc":"164","fix":"169"},{"desc":"164","fix":"170"},{"desc":"164","fix":"171"},{"desc":"164","fix":"172"},{"desc":"164","fix":"173"},{"desc":"164","fix":"174"},[2016,2016]," rel=\"noreferrer\"",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"177","fix":"179"},{"desc":"177","fix":"180"},{"desc":"177","fix":"181"},{"desc":"177","fix":"182"},{"desc":"177","fix":"183"},{"desc":"177","fix":"184"},{"desc":"177","fix":"185"},"Update the dependencies array to be: [dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"188","text":"189"},{"range":"190","text":"187"},{"range":"191","text":"187"},{"range":"192","text":"187"},{"range":"193","text":"187"},{"range":"194","text":"187"},{"range":"195","text":"187"},{"range":"196","text":"187"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"197","text":"198"},"Update the dependencies array to be: [props]",{"range":"199","text":"200"},{"range":"201","text":"200"},{"range":"202","text":"200"},{"range":"203","text":"200"},{"range":"204","text":"200"},{"range":"205","text":"200"},{"range":"206","text":"200"},{"range":"207","text":"200"},[1245,1247],"[dispatch]",[1321,1323],"[demo, dispatch, isLoggedIn]",[1492,1494],[1663,1665],[1868,1870],[2081,2083],[2296,2298],[2443,2445],[2622,2624],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294]]